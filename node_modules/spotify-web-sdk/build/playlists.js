"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeTracksFromPlaylist = exports.uploadPlaylistCoverImage = exports.replacePlaylistTracks = exports.reorderPlaylistTracks = exports.changePlaylistDetails = exports.addTracksToPlaylist = exports.createPlaylist = exports.getPlaylistCoverImage = exports.getCurrentUserPlaylists = exports.getUserPlaylists = exports.getPlaylistTracks = exports.getPlaylist = void 0;
var driver_1 = require("./driver");
var models_1 = require("./models");
var util_1 = require("./util");
var getPlaylist = function (id) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, driver_1.getAxiosSpotifyInstance)().get("/playlists/".concat(id))];
            case 1:
                response = _a.sent();
                return [2, new models_1.Playlist(response.data)];
        }
    });
}); };
exports.getPlaylist = getPlaylist;
var getPlaylistTracks = function (id, params) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, driver_1.getAxiosSpotifyInstance)().get("/playlists/".concat(id, "/tracks"), { params: params })];
            case 1:
                response = _a.sent();
                return [2, new models_1.Page(response.data, models_1.PlaylistTrack)];
        }
    });
}); };
exports.getPlaylistTracks = getPlaylistTracks;
var getUserPlaylists = function (id, params) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, driver_1.getAxiosSpotifyInstance)().get("/users/".concat(id, "/playlists"), { params: params })];
            case 1:
                response = _a.sent();
                return [2, new models_1.Page(response.data, models_1.PlaylistSimplified)];
        }
    });
}); };
exports.getUserPlaylists = getUserPlaylists;
var getCurrentUserPlaylists = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, driver_1.getAxiosSpotifyInstance)().get('/me/playlists', {
                    params: params,
                })];
            case 1:
                response = _a.sent();
                return [2, new models_1.Page(response.data, models_1.PlaylistSimplified)];
        }
    });
}); };
exports.getCurrentUserPlaylists = getCurrentUserPlaylists;
var getPlaylistCoverImage = function (id) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, driver_1.getAxiosSpotifyInstance)().get("playlists/".concat(id, "/images"))];
            case 1:
                response = _a.sent();
                return [2, response.data.map(function (imageJson) { return new models_1.Image(imageJson); })];
        }
    });
}); };
exports.getPlaylistCoverImage = getPlaylistCoverImage;
var createPlaylist = function (userId, name, params) { return __awaiter(void 0, void 0, void 0, function () {
    var data, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                data = __assign({ name: name }, params);
                return [4, (0, driver_1.getAxiosSpotifyInstance)().post("/users/".concat(userId, "/playlists"), data)];
            case 1:
                response = _a.sent();
                return [2, new models_1.Playlist(response.data)];
        }
    });
}); };
exports.createPlaylist = createPlaylist;
var addTracksToPlaylist = function (playlistId, trackUris, position) { return __awaiter(void 0, void 0, void 0, function () {
    var data, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                data = { position: position, uris: trackUris };
                return [4, (0, driver_1.getAxiosSpotifyInstance)().post("/playlists/".concat(playlistId, "/tracks"), data)];
            case 1:
                response = _a.sent();
                return [2, new models_1.PlaylistVersion(response.data)];
        }
    });
}); };
exports.addTracksToPlaylist = addTracksToPlaylist;
var changePlaylistDetails = function (id, params) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, driver_1.getAxiosSpotifyInstance)().put("/playlists/".concat(id), __assign({}, params))];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.changePlaylistDetails = changePlaylistDetails;
var reorderPlaylistTracks = function (id, rangeStart, params) { return __awaiter(void 0, void 0, void 0, function () {
    var data, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                data = (0, util_1.propertiesToSnakeCase)(__assign({ rangeStart: rangeStart }, params));
                return [4, (0, driver_1.getAxiosSpotifyInstance)().put("/playlists/".concat(id, "/tracks"), data)];
            case 1:
                response = _a.sent();
                return [2, new models_1.PlaylistVersion(response.data)];
        }
    });
}); };
exports.reorderPlaylistTracks = reorderPlaylistTracks;
var replacePlaylistTracks = function (id, trackUris) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, driver_1.getAxiosSpotifyInstance)().put("/playlists/".concat(id, "/tracks"), { uris: trackUris })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.replacePlaylistTracks = replacePlaylistTracks;
var uploadPlaylistCoverImage = function (id, imageData) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, driver_1.getAxiosSpotifyInstance)().put("/playlists/".concat(id, "/images"), { imageData: imageData }, { headers: { 'Content-Type': 'image/jpeg' } })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.uploadPlaylistCoverImage = uploadPlaylistCoverImage;
var removeTracksFromPlaylist = function (id, tracks, snapshotId) { return __awaiter(void 0, void 0, void 0, function () {
    var data, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                data = { tracks: tracks, snapshot_id: snapshotId };
                return [4, (0, driver_1.getAxiosSpotifyInstance)().delete("/playlists/".concat(id, "/tracks"), {
                        data: data,
                    })];
            case 1:
                response = _a.sent();
                return [2, new models_1.PlaylistVersion(response.data)];
        }
    });
}); };
exports.removeTracksFromPlaylist = removeTracksFromPlaylist;
