"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.skipUserPlaybackToPreviousTrack = exports.skipUserPlaybackToNextTrack = exports.transferUserPlayback = exports.toggleShuffleForUserPlayback = exports.resumeUserPlayback = exports.startUserPlayback = exports.setVolumeForUserPlayback = exports.setRepeatModeOnUserPlayback = exports.seekToPositionInCurrentlyPlayingTrack = exports.pauseUserPlayback = exports.getUserPlaybackInformation = exports.getUserAvailableDevices = exports.getCurrentUserCurrentlyPlayingTrack = exports.getCurrentUserRecentlyPlayedTracks = void 0;
var lodash_omit_1 = __importDefault(require("lodash.omit"));
var lodash_pick_1 = __importDefault(require("lodash.pick"));
var util_1 = require("./util");
var driver_1 = require("./driver");
var models_1 = require("./models");
var getCurrentUserRecentlyPlayedTracks = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (params && params.before && params.after) {
                    throw new Error("Only one of 'before' or 'after' should be specified");
                }
                return [4, (0, driver_1.getAxiosSpotifyInstance)().get('/me/player/recently-played', { params: params })];
            case 1:
                response = _a.sent();
                return [2, new models_1.CursorBasedPage(response.data, models_1.PlayHistory)];
        }
    });
}); };
exports.getCurrentUserRecentlyPlayedTracks = getCurrentUserRecentlyPlayedTracks;
var getCurrentUserCurrentlyPlayingTrack = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var snakeCaseParams, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                snakeCaseParams = (0, util_1.propertiesToSnakeCase)(params);
                return [4, (0, driver_1.getAxiosSpotifyInstance)().get('/me/player/currently-playing', { params: snakeCaseParams })];
            case 1:
                response = _a.sent();
                return [2, new models_1.CurrentlyPlaying(response.data)];
        }
    });
}); };
exports.getCurrentUserCurrentlyPlayingTrack = getCurrentUserCurrentlyPlayingTrack;
var getUserAvailableDevices = function () { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, driver_1.getAxiosSpotifyInstance)().get('/me/player/devices')];
            case 1:
                response = _a.sent();
                return [2, response.data.devices.map(function (deviceJson) { return new models_1.Device(deviceJson); })];
        }
    });
}); };
exports.getUserAvailableDevices = getUserAvailableDevices;
var getUserPlaybackInformation = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var snakeCaseParams, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                snakeCaseParams = (0, util_1.propertiesToSnakeCase)(params);
                return [4, (0, driver_1.getAxiosSpotifyInstance)().get('/me/player/', {
                        params: snakeCaseParams,
                    })];
            case 1:
                response = _a.sent();
                return [2, new models_1.CurrentlyPlayingContext(response.data)];
        }
    });
}); };
exports.getUserPlaybackInformation = getUserPlaybackInformation;
var pauseUserPlayback = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var snakeCaseParams, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                snakeCaseParams = (0, util_1.propertiesToSnakeCase)(params);
                return [4, (0, driver_1.getAxiosSpotifyInstance)().put('/me/player/pause', undefined, { params: snakeCaseParams })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.pauseUserPlayback = pauseUserPlayback;
var seekToPositionInCurrentlyPlayingTrack = function (positionMs, params) { return __awaiter(void 0, void 0, void 0, function () {
    var snakeCaseParams, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                snakeCaseParams = (0, util_1.propertiesToSnakeCase)(__assign({ positionMs: positionMs }, params));
                return [4, (0, driver_1.getAxiosSpotifyInstance)().put('/me/player/seek', undefined, { params: snakeCaseParams })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.seekToPositionInCurrentlyPlayingTrack = seekToPositionInCurrentlyPlayingTrack;
var setRepeatModeOnUserPlayback = function (state, params) { return __awaiter(void 0, void 0, void 0, function () {
    var snakeCaseParams, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                snakeCaseParams = (0, util_1.propertiesToSnakeCase)(__assign({ state: state }, params));
                return [4, (0, driver_1.getAxiosSpotifyInstance)().put('/me/player/repeat', undefined, { params: snakeCaseParams })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.setRepeatModeOnUserPlayback = setRepeatModeOnUserPlayback;
var setVolumeForUserPlayback = function (volumePercent, params) { return __awaiter(void 0, void 0, void 0, function () {
    var snakeCaseParams, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                snakeCaseParams = (0, util_1.propertiesToSnakeCase)(__assign({ volumePercent: volumePercent }, params));
                return [4, (0, driver_1.getAxiosSpotifyInstance)().put('/me/player/volume', undefined, { params: snakeCaseParams })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.setVolumeForUserPlayback = setVolumeForUserPlayback;
var startUserPlayback = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var queryParams, bodyParams, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                queryParams = (0, util_1.propertiesToSnakeCase)((0, lodash_pick_1.default)(params, 'deviceId'));
                bodyParams = (0, util_1.propertiesToSnakeCase)((0, lodash_omit_1.default)(params, 'deviceId'), true);
                return [4, (0, driver_1.getAxiosSpotifyInstance)().put('/me/player/play', bodyParams, { params: queryParams })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.startUserPlayback = startUserPlayback;
var resumeUserPlayback = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, (0, exports.startUserPlayback)(params)];
    });
}); };
exports.resumeUserPlayback = resumeUserPlayback;
var toggleShuffleForUserPlayback = function (state, params) { return __awaiter(void 0, void 0, void 0, function () {
    var snakeCaseParams, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                snakeCaseParams = (0, util_1.propertiesToSnakeCase)(__assign({ state: state }, params));
                return [4, (0, driver_1.getAxiosSpotifyInstance)().put('/me/player/shuffle', undefined, { params: snakeCaseParams })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.toggleShuffleForUserPlayback = toggleShuffleForUserPlayback;
var transferUserPlayback = function (deviceIds, params) { return __awaiter(void 0, void 0, void 0, function () {
    var snakeCaseParams, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                snakeCaseParams = (0, util_1.propertiesToSnakeCase)(__assign({ deviceIds: deviceIds }, params), true);
                return [4, (0, driver_1.getAxiosSpotifyInstance)().put('/me/player', snakeCaseParams)];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.transferUserPlayback = transferUserPlayback;
var skipUserPlaybackToNextTrack = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var snakeCaseParams, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                snakeCaseParams = (0, util_1.propertiesToSnakeCase)(params);
                return [4, (0, driver_1.getAxiosSpotifyInstance)().post('/me/player/next', undefined, { params: snakeCaseParams })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.skipUserPlaybackToNextTrack = skipUserPlaybackToNextTrack;
var skipUserPlaybackToPreviousTrack = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var snakeCaseParams, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                snakeCaseParams = (0, util_1.propertiesToSnakeCase)(params);
                return [4, (0, driver_1.getAxiosSpotifyInstance)().post('/me/player/previous', undefined, { params: snakeCaseParams })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.skipUserPlaybackToPreviousTrack = skipUserPlaybackToPreviousTrack;
