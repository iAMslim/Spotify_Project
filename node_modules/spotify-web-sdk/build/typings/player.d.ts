/// <reference types="mocha" />
import { PlayHistory, CursorBasedPage, CurrentlyPlaying, Device, CurrentlyPlayingContext } from './models';
export declare const getCurrentUserRecentlyPlayedTracks: (params?: {
    limit?: number;
    before?: string;
    after?: string;
}) => Promise<CursorBasedPage<PlayHistory>>;
export declare const getCurrentUserCurrentlyPlayingTrack: (params?: {
    market?: string;
    additionalTypes?: 'track' | 'episode' | ['track', 'episode'];
}) => Promise<CurrentlyPlaying>;
export declare const getUserAvailableDevices: () => Promise<Device[]>;
export declare const getUserPlaybackInformation: (params?: {
    market?: string;
    additionalTypes?: 'track' | 'episode' | ['track', 'episode'];
}) => Promise<CurrentlyPlayingContext>;
export declare const pauseUserPlayback: (params?: {
    deviceId?: string;
}) => Promise<string>;
export declare const seekToPositionInCurrentlyPlayingTrack: (positionMs: number, params?: {
    deviceId?: string;
}) => Promise<string>;
export declare const setRepeatModeOnUserPlayback: (state: 'track' | 'context' | 'off', params?: {
    deviceId?: string;
}) => Promise<string>;
export declare const setVolumeForUserPlayback: (volumePercent: number, params?: {
    deviceId?: string;
}) => Promise<string>;
declare type Offset = {
    position: number;
} | {
    uri: string;
};
export declare const startUserPlayback: (params?: {
    deviceId?: string;
    contextUri?: string;
    uris?: string[];
    offset?: Offset;
    positionMs?: number;
}) => Promise<string>;
export declare const resumeUserPlayback: (params?: {
    deviceId?: string;
}) => Promise<string>;
export declare const toggleShuffleForUserPlayback: (state: boolean, params?: {
    deviceId?: string;
}) => Promise<string>;
export declare const transferUserPlayback: (deviceIds: string[], params?: {
    play?: boolean;
}) => Promise<string>;
export declare const skipUserPlaybackToNextTrack: (params?: {
    deviceId?: string;
}) => Promise<string>;
export declare const skipUserPlaybackToPreviousTrack: (params?: {
    deviceId?: string;
}) => Promise<string>;
export {};
