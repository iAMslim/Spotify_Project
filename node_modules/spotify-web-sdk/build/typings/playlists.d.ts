import { Playlist, PlaylistTrack, PlaylistSimplified, Page, Image, PlaylistVersion } from './models';
export declare const getPlaylist: (id: string) => Promise<Playlist>;
export declare const getPlaylistTracks: (id: string, params?: {
    fields?: string;
    limit?: number;
    offset?: number;
    market?: string;
}) => Promise<Page<PlaylistTrack>>;
export declare const getUserPlaylists: (id: string, params?: {
    limit?: number;
    offset?: number;
}) => Promise<Page<PlaylistSimplified>>;
export declare const getCurrentUserPlaylists: (params?: {
    limit?: number;
    offset?: number;
}) => Promise<Page<PlaylistSimplified>>;
export declare const getPlaylistCoverImage: (id: string) => Promise<Image[]>;
export declare const createPlaylist: (userId: string, name: string, params?: {
    public?: boolean;
    collaborative?: boolean;
    description?: string;
}) => Promise<Playlist>;
export declare const addTracksToPlaylist: (playlistId: string, trackUris: string[], position?: number) => Promise<PlaylistVersion>;
export declare const changePlaylistDetails: (id: string, params?: {
    name?: string;
    public?: boolean;
    collaborative?: boolean;
    description?: string;
}) => Promise<string>;
export declare const reorderPlaylistTracks: (id: string, rangeStart: number, params?: {
    rangeLength?: number;
    insertBefore?: number;
    snapshotId?: string;
}) => Promise<PlaylistVersion>;
export declare const replacePlaylistTracks: (id: string, trackUris: string[]) => Promise<string>;
export declare const uploadPlaylistCoverImage: (id: string, imageData: any) => Promise<string>;
declare type TrackToBeRemoved = {
    uri: string;
    positions?: number[];
};
export declare const removeTracksFromPlaylist: (id: string, tracks: TrackToBeRemoved[], snapshotId?: string) => Promise<PlaylistVersion>;
export {};
