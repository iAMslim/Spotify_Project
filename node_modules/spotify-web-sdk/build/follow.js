"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unfollowPlaylist = exports.unfollowArtistsOrUsers = exports.followPlaylist = exports.followArtistsOrUsers = exports.checkUsersFollowingPlaylist = exports.isFollowing = exports.getFollowedArtists = void 0;
var driver_1 = require("./driver");
var models_1 = require("./models");
var getFollowedArtists = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var exceptionLink, config, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (params && params.limit && (params.limit < 1 || params.limit > 50)) {
                    exceptionLink = 'https://developer.spotify.com/documentation/web-api/reference/follow/get-followed/';
                    throw new Error("The limit must be between 1 and 50 (inclusive). See ".concat(exceptionLink, " for details"));
                }
                config = { params: __assign(__assign({}, params), { type: 'artist' }) };
                return [4, (0, driver_1.getAxiosSpotifyInstance)().get('/me/following', config)];
            case 1:
                response = _a.sent();
                return [2, response.data.artists.items.map(function (artistJson) { return new models_1.Artist(artistJson); })];
        }
    });
}); };
exports.getFollowedArtists = getFollowedArtists;
var isFollowing = function (type, ids) { return __awaiter(void 0, void 0, void 0, function () {
    var exceptionLink, config, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                exceptionLink = 'https://developer.spotify.com/documentation/web-api/reference/follow/check-current-user-follows/';
                if (type !== 'artist' && type !== 'user') {
                    throw new Error("The type must be either artist or user. See ".concat(exceptionLink, " for details"));
                }
                else if (ids.length > 50) {
                    throw new Error("The maximum number of ids to check is 50. See ".concat(exceptionLink, " for details"));
                }
                config = { params: { type: type, ids: ids.join() } };
                return [4, (0, driver_1.getAxiosSpotifyInstance)().get('/me/following/contains', config)];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.isFollowing = isFollowing;
var checkUsersFollowingPlaylist = function (playlistId, ids) { return __awaiter(void 0, void 0, void 0, function () {
    var exceptionLink, config, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (ids.length > 5) {
                    exceptionLink = 'https://developer.spotify.com/documentation/web-api/reference/follow/check-user-following-playlist/';
                    throw new Error("The maximum number of users to check is 5. See ".concat(exceptionLink, " for details"));
                }
                config = { params: { ids: ids.join() } };
                return [4, (0, driver_1.getAxiosSpotifyInstance)().get("/playlists/".concat(playlistId, "/followers/contains"), config)];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.checkUsersFollowingPlaylist = checkUsersFollowingPlaylist;
var followArtistsOrUsers = function (ids, type) { return __awaiter(void 0, void 0, void 0, function () {
    var params, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                params = { type: type };
                return [4, (0, driver_1.getAxiosSpotifyInstance)().put('/me/following', { ids: ids }, { params: params })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.followArtistsOrUsers = followArtistsOrUsers;
var followPlaylist = function (id, publicFollow) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, driver_1.getAxiosSpotifyInstance)().put("/playlists/".concat(id, "/followers"), { public: publicFollow })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.followPlaylist = followPlaylist;
var unfollowArtistsOrUsers = function (ids, type) { return __awaiter(void 0, void 0, void 0, function () {
    var params, data, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                params = { type: type };
                data = { ids: ids };
                return [4, (0, driver_1.getAxiosSpotifyInstance)().delete('/me/following', {
                        params: params,
                        data: data,
                    })];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.unfollowArtistsOrUsers = unfollowArtistsOrUsers;
var unfollowPlaylist = function (id) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, driver_1.getAxiosSpotifyInstance)().delete("/playlists/".concat(id, "/followers"))];
            case 1:
                response = _a.sent();
                return [2, response.data];
        }
    });
}); };
exports.unfollowPlaylist = unfollowPlaylist;
