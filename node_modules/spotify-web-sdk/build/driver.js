"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAxiosSpotifyInstance = exports.getToken = exports.init = void 0;
var axios_1 = __importDefault(require("axios"));
var options;
var spotifyAxiosInstance;
var setupRefresh = function (refreshTokenFunction) {
    spotifyAxiosInstance.interceptors.response.use(function (response) { return response; }, function (error) {
        if (error.config &&
            !error.config.__isRetryRequest &&
            error.response &&
            error.response.status === 401) {
            error.config.__isRetryRequest = true;
            return refreshTokenFunction(options.refreshToken).then(function (token) {
                error.config.headers.Authorization = "Bearer ".concat(token);
                return axios_1.default.request(error.config);
            });
        }
        return Promise.reject(error);
    });
};
var init = function (config) {
    options = config;
    spotifyAxiosInstance = axios_1.default.create({
        baseURL: 'https://api.spotify.com/v1',
        headers: { Authorization: "Bearer ".concat(options.token) },
    });
    if (options.refreshTokenFunction) {
        setupRefresh(options.refreshTokenFunction);
    }
};
exports.init = init;
var getToken = function () {
    if (options)
        return options.token;
    throw new Error('You must log in first');
};
exports.getToken = getToken;
var getAxiosSpotifyInstance = function () {
    if (spotifyAxiosInstance)
        return spotifyAxiosInstance;
    throw new Error('You must log in first');
};
exports.getAxiosSpotifyInstance = getAxiosSpotifyInstance;
