#!/usr/bin/env node
"use strict";

/*eslint no-process-exit:0*/

var readFileSync = require("fs").readFileSync;

var joinPath = require("path").join;

var spawn = require("child_process").spawn;

if (require.main === module) {
  main(defineExec(spawn, process.platform), process.argv.slice(2));
}

function main(exec, commands) {
  switch (commands[0]) {
    case undefined:
    case "-h":
    case "--help":
      printHelp();
      process.exit(0);
      break;

    case "-v":
    case "--version":
      printVersion();
      process.exit(0);
      break;
  }

  commands.forEach(function (command) {
    var cp = exec(command);
    cp.stdout.pipe(process.stdout);
    cp.stderr.pipe(process.stderr);
    cp.on("exit", function (code) {
      if (code) {
        console.error("Non-Zero Exit(" + code + "): " + command);
        process.exit(1);
      }
    });
    cp.on("error", function (err) {
      console.error("Error(" + err.message + "): " + command);
      process.exit(1);
    });
  });
}

function defineExec(spawn, platform) {
  if (platform === "win32") {
    var _ret = (function () {
      var FILE = process.env.comspec || "cmd.exe";
      var OPTIONS = { windowsVerbatimArguments: true };
      return {
        v: function exec(command) {
          return spawn(FILE, ["/s", "/c", "\"" + command + "\""], OPTIONS);
        }
      };
    })();

    if (typeof _ret === "object") {
      return _ret.v;
    }
  } else {
    return function exec(command) {
      return spawn("/bin/sh", ["-c", command]);
    };
  }
}

function printHelp() {
  console.log("\nUsage: run-all [OPTIONS] [COMMANDS...]\n\n  If there are spaces in command text, enclose the command by double quotes.\n\n  Options:\n    -h, --help      Print this help text.\n    -v, --version   Print the version number.\n\n  See Also:\n    https://github.com/mysticatea/run-all\n");
}

function printVersion() {
  var version = JSON.parse(readFileSync(joinPath(__dirname, "../package.json"), { encoding: "utf8" })).version;

  console.log("v" + version);
}
//# sourceMappingURL=data:application/json;base64,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S0FBSyxDQUN4QixZQUFZLENBQ1YsUUFBUSxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxFQUN0QyxFQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUMsQ0FDbkIsQ0FDRixDQUFDLE9BQU8sQ0FBQzs7QUFFVixTQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsQ0FBQztDQUM1QiIsImZpbGUiOiJzcmMvY29tbWFuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbi8qZXNsaW50IG5vLXByb2Nlc3MtZXhpdDowKi9cbmltcG9ydCB7cmVhZEZpbGVTeW5jfSBmcm9tIFwiZnNcIjtcbmltcG9ydCB7am9pbiBhcyBqb2luUGF0aH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7c3Bhd259IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5cbmlmIChyZXF1aXJlLm1haW4gPT09IG1vZHVsZSkge1xuICBtYWluKGRlZmluZUV4ZWMoc3Bhd24sIHByb2Nlc3MucGxhdGZvcm0pLCBwcm9jZXNzLmFyZ3Yuc2xpY2UoMikpO1xufVxuXG5mdW5jdGlvbiBtYWluKGV4ZWMsIGNvbW1hbmRzKSB7XG4gIHN3aXRjaCAoY29tbWFuZHNbMF0pIHtcbiAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICBjYXNlIFwiLWhcIjpcbiAgICBjYXNlIFwiLS1oZWxwXCI6XG4gICAgICBwcmludEhlbHAoKTtcbiAgICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcIi12XCI6XG4gICAgY2FzZSBcIi0tdmVyc2lvblwiOlxuICAgICAgcHJpbnRWZXJzaW9uKCk7XG4gICAgICBwcm9jZXNzLmV4aXQoMCk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGNvbW1hbmRzLmZvckVhY2goY29tbWFuZCA9PiB7XG4gICAgY29uc3QgY3AgPSBleGVjKGNvbW1hbmQpO1xuICAgIGNwLnN0ZG91dC5waXBlKHByb2Nlc3Muc3Rkb3V0KTtcbiAgICBjcC5zdGRlcnIucGlwZShwcm9jZXNzLnN0ZGVycik7XG4gICAgY3Aub24oXCJleGl0XCIsIGNvZGUgPT4ge1xuICAgICAgaWYgKGNvZGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTm9uLVplcm8gRXhpdCgke2NvZGV9KTogJHtjb21tYW5kfWApO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY3Aub24oXCJlcnJvclwiLCBlcnIgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IoJHtlcnIubWVzc2FnZX0pOiAke2NvbW1hbmR9YCk7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVFeGVjKHNwYXduLCBwbGF0Zm9ybSkge1xuICBpZiAocGxhdGZvcm0gPT09IFwid2luMzJcIikge1xuICAgIGNvbnN0IEZJTEUgPSBwcm9jZXNzLmVudi5jb21zcGVjIHx8IFwiY21kLmV4ZVwiO1xuICAgIGNvbnN0IE9QVElPTlMgPSB7d2luZG93c1ZlcmJhdGltQXJndW1lbnRzOiB0cnVlfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gZXhlYyhjb21tYW5kKSB7XG4gICAgICByZXR1cm4gc3Bhd24oRklMRSwgW1wiL3NcIiwgXCIvY1wiLCBgXCIke2NvbW1hbmR9XCJgXSwgT1BUSU9OUyk7XG4gICAgfTtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZXhlYyhjb21tYW5kKSB7XG4gICAgICByZXR1cm4gc3Bhd24oXCIvYmluL3NoXCIsIFtcIi1jXCIsIGNvbW1hbmRdKTtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHByaW50SGVscCgpIHtcbiAgY29uc29sZS5sb2coYFxuVXNhZ2U6IHJ1bi1hbGwgW09QVElPTlNdIFtDT01NQU5EUy4uLl1cblxuICBJZiB0aGVyZSBhcmUgc3BhY2VzIGluIGNvbW1hbmQgdGV4dCwgZW5jbG9zZSB0aGUgY29tbWFuZCBieSBkb3VibGUgcXVvdGVzLlxuXG4gIE9wdGlvbnM6XG4gICAgLWgsIC0taGVscCAgICAgIFByaW50IHRoaXMgaGVscCB0ZXh0LlxuICAgIC12LCAtLXZlcnNpb24gICBQcmludCB0aGUgdmVyc2lvbiBudW1iZXIuXG5cbiAgU2VlIEFsc286XG4gICAgaHR0cHM6Ly9naXRodWIuY29tL215c3RpY2F0ZWEvcnVuLWFsbFxuYCk7XG59XG5cbmZ1bmN0aW9uIHByaW50VmVyc2lvbigpIHtcbiAgY29uc3QgdmVyc2lvbiA9IEpTT04ucGFyc2UoXG4gICAgcmVhZEZpbGVTeW5jKFxuICAgICAgam9pblBhdGgoX19kaXJuYW1lLCBcIi4uL3BhY2thZ2UuanNvblwiKSxcbiAgICAgIHtlbmNvZGluZzogXCJ1dGY4XCJ9XG4gICAgKVxuICApLnZlcnNpb247XG5cbiAgY29uc29sZS5sb2coXCJ2XCIgKyB2ZXJzaW9uKTtcbn1cbiJdfQ==